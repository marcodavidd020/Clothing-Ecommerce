---
description: 
globs: 
alwaysApply: true
---
// Flutter App Expert .cursorrules

// Flexibility Notice

// Note: This is a recommended project structure, but be flexible and adapt to existing project structures.
// Do not enforce these structural patterns if the project follows a different organization.
// Focus on maintaining consistency with the existing project architecture while applying Flutter best practices.

// Flutter Best Practices

const flutterBestPractices = [
"Adapt to existing project architecture while maintaining clean code principles",
"Use Flutter 3.x features and Material 3 design",
"Implement clean architecture with BLoC pattern",
"Follow proper state management principles",
"Use proper dependency injection",
"Implement proper error handling",
"Follow platform-specific design guidelines",
"Use proper localization techniques",
"Modularize features with their own constants and resources",
];

// Project Structure

// Note: This is a reference structure. Adapt to the project's existing organization

const projectStructure = `
lib/
core/
constants/ # Global shared constants
theme/
utils/
widgets/ # Reusable widgets across the app

features/ # Organized by functional modules
feature_name/
core/ # Module-specific core
constants/ # Module-specific constants (strings, UI, etc.)
data/
datasources/
models/
repositories/
domain/
entities/
repositories/
usecases/
presentation/
bloc/
pages/
widgets/
l10n/
main.dart
test/
unit/
widget/
integration/
`;

// Example Structure: Cart Module
const cartModuleStructure = `features/cart/
  core/
    constants/
      cart_constants.dart   # Barrel file for constants
      cart_strings.dart     # Cart-specific text strings
      cart_ui.dart          # UI dimensions and constants
    core.dart               # Barrel file for core
  domain/
    entities/
      cart_item_model.dart  # Cart item model
    domain.dart             # Barrel file for domain
  presentation/
    bloc/                   # Cart state using BLoC
    pages/
      cart_page.dart        # Main cart page
    widgets/
      cart_item_widget.dart # Widget for cart item
      confirm_dialog_widget.dart # Confirmation dialog
      widgets.dart          # Barrel file for widgets`;

// Coding Guidelines

const codingGuidelines = `

1. Use proper null safety practices
2. Implement proper error handling with Either type
3. Follow proper naming conventions
4. Use proper widget composition
5. Implement proper routing using GoRouter
6. Use proper form validation
7. Follow proper state management with BLoC
8. Implement proper dependency injection using GetIt
9. Use proper asset management
10. Follow proper testing practices
11. Maintain module-specific constants in their respective modules
12. Use barrel files to simplify imports
13. Avoid global constants for module-specific elements
    `;

// Widget Guidelines

const widgetGuidelines = `

1. Keep widgets small and focused
2. Use const constructors when possible
3. Implement proper widget keys
4. Follow proper layout principles
5. Use proper widget lifecycle methods
6. Implement proper error boundaries
7. Use proper performance optimization techniques
8. Follow proper accessibility guidelines
   `;

// Performance Guidelines

const performanceGuidelines = `

1. Use proper image caching
2. Implement proper list view optimization
3. Use proper build methods optimization
4. Follow proper state management patterns
5. Implement proper memory management
6. Use proper platform channels when needed
7. Follow proper compilation optimization techniques
   `;

// Testing Guidelines

const testingGuidelines = `

1. Write unit tests for business logic
2. Implement widget tests for UI components
3. Use integration tests for feature testing
4. Implement proper mocking strategies
5. Use proper test coverage tools
6. Follow proper test naming conventions
7. Implement proper CI/CD testing
   `;

// Modularity Guidelines

const modularityGuidelines = `

1. Each module should be self-contained with its own constants
2. Keep global constants only for elements shared throughout the app
3. Use barrel files to facilitate importing multiple elements
4. Create a specific core for each module (core/)
5. Separate UI, strings, and other constants into distinct files
6. Avoid duplicating constants between modules
7. Maintain consistency in structure across all modules
   `;
